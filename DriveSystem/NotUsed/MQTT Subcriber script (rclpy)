#!/usr/bin/env python3
"""
TurtleBot3 MQTT Subscriber using rclpy for ROS 2 Jazzy

- Connects to MQTT broker
- Subscribes to 'turtlebot/move'
- Moves the robot forward for the duration specified in the MQTT message
"""

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import TwistStamped
import paho.mqtt.client as mqtt
import threading
import time

# ---------------- Adjustable Parameters ----------------
MQTT_BROKER = "localhost"      # IP of MQTT broker
MQTT_PORT = 1883               # MQTT port
MQTT_TOPIC = "turtlebot/move"  # Topic to subscribe to
FORWARD_SPEED = 0.1            # Forward speed in m/s
# -------------------------------------------------------

class MqttTurtlebot(Node):
    def __init__(self):
        super().__init__('mqtt_turtlebot_node')
        self.pub = self.create_publisher(TwistStamped, '/cmd_vel', 10)
        self.get_logger().info("ROS2 node initialized and publisher to /cmd_vel created")

    def move_robot(self, duration: float):
        msg = TwistStamped()
        msg.twist.linear.x = FORWARD_SPEED
        msg.twist.linear.y = 0.0
        msg.twist.linear.z = 0.0
        msg.twist.angular.x = 0.0
        msg.twist.angular.y = 0.0
        msg.twist.angular.z = 0.0

        self.get_logger().info(f"Moving forward for {duration} seconds")
        start_time = time.time()
        while time.time() - start_time < duration:
            msg.header.stamp = self.get_clock().now().to_msg()
            self.pub.publish(msg)
            time.sleep(0.05)  # 20 Hz

        # Stop the robot
        msg.twist.linear.x = 0.0
        self.pub.publish(msg)
        self.get_logger().info("Movement complete")

# ---------------- MQTT Callbacks ----------------
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print(f"[INFO] Connected to MQTT broker at {MQTT_BROKER}:{MQTT_PORT}")
        client.subscribe(MQTT_TOPIC)
        print(f"[INFO] Subscribed to topic: {MQTT_TOPIC}")
    else:
        print(f"[ERROR] MQTT connection failed with code {rc}")

def on_message(client, userdata, msg):
    try:
        duration = float(msg.payload.decode())
        if duration <= 0:
            print("[WARNING] Duration must be positive")
            return
        # Call the ROS2 move_robot function
        userdata['ros_node'].move_robot(duration)
    except ValueError:
        print(f"[WARNING] Received invalid duration: {msg.payload.decode()}")

# ---------------- Main ----------------
def main():
    rclpy.init()
    ros_node = MqttTurtlebot()

    # Run rclpy spin in a separate thread so MQTT can run in main thread
    ros_thread = threading.Thread(target=rclpy.spin, args=(ros_node,), daemon=True)
    ros_thread.start()

    # Setup MQTT
    client = mqtt.Client(userdata={'ros_node': ros_node})
    client.on_connect = on_connect
    client.on_message = on_message
    print("[INFO] Connecting to MQTT broker...")
    client.connect(MQTT_BROKER, MQTT_PORT, keepalive=60)
    client.loop_forever()

    # Shutdown (never reached in this design)
    ros_node.destroy_node()
    rclpy.shutdown()

if __name__ == "__main__":
    main()
